name: Kernel Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          bc bison build-essential cpio curl flex git \
          kmod libssl-dev libncurses5-dev libelf-dev \
          python3 unzip wget xz-utils

    - name: Clone Proton Clang
      run: |
        git clone --depth=1 https://github.com/kdrag0n/proton-clang proton-clang

    - name: Generate defconfig (use system GCC for host tools)
      run: |
        make O=out ARCH=arm64 SUBARCH=arm64 realme_defconfig

    - name: Build kernel with Proton Clang
      run: |
        echo "PATH=$GITHUB_WORKSPACE/proton-clang/bin:$PATH" >> $GITHUB_ENV
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "SUBARCH=arm64" >> $GITHUB_ENV
        make -j$(nproc) O=out \
          ARCH=arm64 \
          SUBARCH=arm64 \
          CC=$GITHUB_WORKSPACE/proton-clang/bin/clang \
          CROSS_COMPILE=$GITHUB_WORKSPACE/proton-clang/bin/aarch64-linux-gnu- \
          CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/proton-clang/bin/arm-linux-gnueabi- \
          CLANG_TRIPLE=$GITHUB_WORKSPACE/proton-clang/bin/aarch64-linux-gnu- \
          AR=$GITHUB_WORKSPACE/proton-clang/bin/llvm-ar \
          NM=$GITHUB_WORKSPACE/proton-clang/bin/llvm-nm \
          OBJCOPY=$GITHUB_WORKSPACE/proton-clang/bin/llvm-objcopy \
          OBJDUMP=$GITHUB_WORKSPACE/proton-clang/bin/llvm-objdump \
          STRIP=$GITHUB_WORKSPACE/proton-clang/bin/llvm-strip \
          LD=$GITHUB_WORKSPACE/proton-clang/bin/ld.lld

    - name: Upload Kernel Image
      uses: actions/upload-artifact@v4
      with:
        name: Kernel
        path: out/arch/arm64/boot/Image
